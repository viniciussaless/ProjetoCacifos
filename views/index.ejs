<!doctype html>
<html lang="en">

<head>
  <title>Login</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.11.2/css/all.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap">
  <link rel="stylesheet" href="node_modules\bootstrap\dist\css\bootstrap.css">
  <link rel="stylesheet" href="../css/index.css">
</head>

<body>
  <div>
    <nav class="navbar navbar-expand-lg navbar-light" style="height: 7vh;">
      <a class="navbar-brand text-white mb-1" href="#">Trotiguard</a>

      <button class="navbar-toggler border-0 mb-1" type="button" data-toggle="collapse" data-target="#navbarNav"
        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" style="background-color: #31363F;" id="navbarNav">
        <ul class="navbar-nav ml-auto">
          <li class="nav-item active">
            <a class="nav-link text-white mr-4" href="#">Pagina Inicial <span class="sr-only">(current)</span></a>
          </li>

          <li class="nav-item active">
            <a class="nav-link text-white mr-4" href="#">Permições <span class="sr-only">(current)</span></a>
          </li>

          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle text-white mr-4" href="#" id="navbarDropdown" role="button"
              data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              Administração
            </a>
            <div class="dropdown-menu mr-4" aria-labelledby="navbarDropdown">
              <a class="dropdown-item" href="#">Cacifos</a>
              <a class="dropdown-item" href="#">Utilizadores</a>
              <a class="dropdown-item" href="#">Estatísticas</a>
            </div>
          </li>
        </ul>
      </div>
    </nav>
    <div class="conteudo">
      <div class="row justify-content-center">
        <div class="col-xl-6 col-lg-6 col-md-8 col-sm-10">
          <canvas id="myChart"></canvas>
        </div>
      </div>

      <div class="row">
        <canvas id="myChart"></canvas>

        <canvas id="myChart"></canvas>
      </div>

    </div>
  </div>


  <!-- Optional JavaScript -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="node_modules\chart.js\dist\chart.umd.js"></script>
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
    crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"></script>
</body>



<script>
      const ctx = document.getElementById('myChart');
    const data = [];
    const data2 = [];
    let prev = 100;
    let prev2 = 80;
    for (let i = 0; i < 1000; i++) {
        prev += 5 - Math.random() * 10;
    data.push({x: i, y: prev });
    prev2 += 5 - Math.random() * 10;
    data2.push({x: i, y: prev2 });
  }

    const totalDuration = 10000;
    const delayBetweenPoints = totalDuration / data.length;
  const previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;
    const animation = {
        x: {
        type: 'number',
    easing: 'linear',
    duration: delayBetweenPoints,
    from: NaN, // the point is initially skipped
    delay(ctx) {
        if (ctx.type !== 'data' || ctx.xStarted) {
          return 0;
        }
    ctx.xStarted = true;
    return ctx.index * delayBetweenPoints;
      }
    },
    y: {
        type: 'number',
    easing: 'linear',
    duration: delayBetweenPoints,
    from: previousY,
    delay(ctx) {
        if (ctx.type !== 'data' || ctx.yStarted) {
          return 0;
        }
    ctx.yStarted = true;
    return ctx.index * delayBetweenPoints;
      }
    }
  };

    new Chart(ctx, {
        type: 'line',
    data: {
        datasets: [{
        borderColor: 'red',
    borderWidth: 1,
    radius: 0,
    data: data,
      },
    {
        borderColor: 'blue',
    borderWidth: 1,
    radius: 0,
    data: data2,
      }]
    },
    options: {
        animation,
        interaction: {
        intersect: false
      },
    plugins: {
        legend: false
      },
    scales: {
        x: {
        type: 'linear'
        }
      }
    }
  });
</script>

</html>